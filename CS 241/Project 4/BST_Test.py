import unittest
from Binary_Search_Tree import Binary_Search_Tree

class DSQTester(unittest.TestCase):
  
  def setUp(self):
    # Run your tests with each deque type to ensure that
    # they behave identically.
    self.__bstree = Binary_Search_Tree()

  # TODO add your test methods here. Like Linked_List_Test.py,
  # each test should me in a method whose name begins with test_
  def test_empty_tree(self):
    self.assertEqual('[ ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(0, height)

  def test_insert_30(self):
    self.__bstree.insert_element(30)
    self.assertEqual('[ 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

  def test_insert_30_30(self):
    self.__bstree.insert_element(30)
    with self.assertRaises(ValueError):
      self.__bstree.insert_element(30)
    self.assertEqual('[ 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

    
  def test_insert_one_remove_one(self):
    self.__bstree.insert_element(30)
    self.__bstree.remove_element(30)
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(0, height)

  def test_insert_one_remove_nonexist(self):
    self.__bstree.insert_element(30)
    with self.assertRaises(ValueError):
      self.__bstree.remove_element(40)
    self.assertEqual('[ 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

  def test_insert_20_30_40(self):
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(40)
    self.assertEqual('[ 20, 30, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 30, 40 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 40, 30, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_30_20_40(self):
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(40)
    self.assertEqual('[ 20, 30, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 40 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 40, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_40_30_20(self):
    self.__bstree.insert_element(40)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.assertEqual('[ 20, 30, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 40, 30, 20 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 30, 40 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_20_30_40_remove_40(self):
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(40)
    self.__bstree.remove_element(40)
    self.assertEqual('[ 20, 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_20_30_40_remove_30(self):
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(40)
    self.__bstree.remove_element(30)
    self.assertEqual('[ 20, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 40 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 40, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_30_20_40_remove_30(self):
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(40)
    self.__bstree.remove_element(30)
    self.assertEqual('[ 20, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 40, 20 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 40 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_6_4_3_5_7_13_8_22(self):
    self.__bstree.insert_element(6)
    self.__bstree.insert_element(4)
    self.__bstree.insert_element(3)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(7)
    self.__bstree.insert_element(13)
    self.__bstree.insert_element(8)
    self.__bstree.insert_element(22)
    self.assertEqual('[ 3, 4, 5, 6, 7, 8, 13, 22 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 6, 4, 3, 5, 7, 13, 8, 22 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 3, 5, 4, 8, 22, 13, 7, 6 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_6_4_3_5_7_13_8_22_remove_3(self):
    self.__bstree.insert_element(6)
    self.__bstree.insert_element(4)
    self.__bstree.insert_element(3)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(7)
    self.__bstree.insert_element(13)
    self.__bstree.insert_element(8)
    self.__bstree.insert_element(22)
    self.__bstree.remove_element(3)
    self.assertEqual('[ 4, 5, 6, 7, 8, 13, 22 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 6, 4, 5, 7, 13, 8, 22 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 4, 8, 22, 13, 7, 6 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_6_4_3_5_7_13_8_22_remove_7(self):
    self.__bstree.insert_element(6)
    self.__bstree.insert_element(4)
    self.__bstree.insert_element(3)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(7)
    self.__bstree.insert_element(13)
    self.__bstree.insert_element(8)
    self.__bstree.insert_element(22)
    self.__bstree.remove_element(7)
    self.assertEqual('[ 3, 4, 5, 6, 8, 13, 22 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 6, 4, 3, 5, 13, 8, 22 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 3, 5, 4, 8, 22, 13, 6 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_6_4_3_5_7_13_8_22_remove_13(self):
    self.__bstree.insert_element(6)
    self.__bstree.insert_element(4)
    self.__bstree.insert_element(3)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(7)
    self.__bstree.insert_element(13)
    self.__bstree.insert_element(8)
    self.__bstree.insert_element(22)
    self.__bstree.remove_element(13)
    self.assertEqual('[ 3, 4, 5, 6, 7, 8, 22 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 6, 4, 3, 5, 7, 22, 8 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 3, 5, 4, 8, 22, 7, 6 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_6_4_3_5_7_13_8_22_remove_7_13_8_3_5(self):
    self.__bstree.insert_element(6)
    self.__bstree.insert_element(4)
    self.__bstree.insert_element(3)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(7)
    self.__bstree.insert_element(13)
    self.__bstree.insert_element(8)
    self.__bstree.insert_element(22)
    self.__bstree.remove_element(7)
    self.__bstree.remove_element(13)
    self.__bstree.remove_element(8)
    self.__bstree.remove_element(3)
    self.__bstree.remove_element(5)
    self.assertEqual('[ 4, 6, 22 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 6, 4, 22 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 4, 22, 6 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_50_20_75_80_90(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.assertEqual('[ 20, 50, 75, 80, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 50, 20, 75, 80, 90 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 90, 80, 75, 50 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_50_20_75_80_90_remove_75(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.assertEqual('[ 20, 50, 80, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 50, 20, 80, 90 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 90, 80, 50 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_50_20_75_80_90_remove_75_insert_75(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.__bstree.insert_element(75)
    self.assertEqual('[ 20, 50, 75, 80, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 50, 20, 80, 75, 90 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 75, 90, 80, 50 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)
    
  def test_insert_50_20_75_80_90_remove_75_insert_75_remove_20(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.__bstree.insert_element(75)
    self.__bstree.remove_element(20)
    self.assertEqual('[ 50, 75, 80, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 50, 80, 75, 90 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 75, 90, 80, 50 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_50_20_75_80_90_remove_75_insert_75_remove_20_50(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.__bstree.insert_element(75)
    self.__bstree.remove_element(20)
    self.__bstree.remove_element(50)
    self.assertEqual('[ 75, 80, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 80, 75, 90 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 75, 90, 80 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_50_20_75_80_90_remove_75_insert_75_remove_20_50_insert_83_81_85_82(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.__bstree.insert_element(75)
    self.__bstree.remove_element(20)
    self.__bstree.remove_element(50)
    self.__bstree.insert_element(83)
    self.__bstree.insert_element(81)
    self.__bstree.insert_element(85)
    self.__bstree.insert_element(82)
    self.assertEqual('[ 75, 80, 81, 82, 83, 85, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 80, 75, 90, 83, 81, 82, 85 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 75, 82, 81, 85, 83, 90, 80 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(5, height)

  def test_insert_50_20_75_80_90_remove_75_insert_75_remove_20_50_insert_83_81_85_82_remove_80(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.__bstree.insert_element(75)
    self.__bstree.remove_element(20)
    self.__bstree.remove_element(50)
    self.__bstree.insert_element(83)
    self.__bstree.insert_element(81)
    self.__bstree.insert_element(85)
    self.__bstree.insert_element(82)
    self.__bstree.remove_element(80)
    self.assertEqual('[ 75, 81, 82, 83, 85, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 81, 75, 90, 83, 82, 85 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 75, 82, 85, 83, 90, 81 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_50_20_75_80_90_remove_75_insert_75_remove_20_50_insert_83_81_85_82_remove_80_81(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(75)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(90)
    self.__bstree.remove_element(75)
    self.__bstree.insert_element(75)
    self.__bstree.remove_element(20)
    self.__bstree.remove_element(50)
    self.__bstree.insert_element(83)
    self.__bstree.insert_element(81)
    self.__bstree.insert_element(85)
    self.__bstree.insert_element(82)
    self.__bstree.remove_element(80)
    self.__bstree.remove_element(81)
    self.assertEqual('[ 75, 82, 83, 85, 90 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 82, 75, 90, 83, 85 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 75, 85, 83, 90, 82 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)


    
if __name__ == '__main__':
  unittest.main()

