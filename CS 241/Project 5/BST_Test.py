import unittest
from Binary_Search_Tree import Binary_Search_Tree

class DSQTester(unittest.TestCase):
  
  def setUp(self):
    self.__bstree = Binary_Search_Tree()

  def test_empty_tree(self):
    self.assertEqual('[ ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(0, height)

  def test_insert_30(self):
    self.__bstree.insert_element(30)
    self.assertEqual('[ 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

  def test_insert_30_30(self):
    self.__bstree.insert_element(30)
    with self.assertRaises(ValueError):
      self.__bstree.insert_element(30)
    self.assertEqual('[ 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

    
  def test_insert_one_remove_one(self):
    self.__bstree.insert_element(30)
    self.__bstree.remove_element(30)
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(0, height)

  def test_insert_one_remove_nonexist(self):
    self.__bstree.insert_element(30)
    with self.assertRaises(ValueError):
      self.__bstree.remove_element(40)
    self.assertEqual('[ 30 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

  def test_insert_20_30_40(self):
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(40)
    self.assertEqual('[ 20, 30, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 40 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 40, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_30_20_40(self):
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(40)
    self.assertEqual('[ 20, 30, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 40 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 40, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_40_30_20(self):
    self.__bstree.insert_element(40)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.assertEqual('[ 20, 30, 40 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 40 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 40, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_50(self):
    self.__bstree.insert_element(50)
    self.assertEqual('[ 50 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 50 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 50 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(1, height)

  def test_insert_50_30(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.assertEqual('[ 30, 50 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 50, 30 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30, 50 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_50_30_20(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.assertEqual('[ 20, 30, 50 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 50 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 20, 50, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(2, height)

  def test_insert_50_30_20_10(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.assertEqual('[ 10, 20, 30, 50 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 10, 50 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 10, 20, 50, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_50_30_20_10_5(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.__bstree.insert_element(5)
    self.assertEqual('[ 5, 10, 20, 30, 50 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 10, 5, 20, 50 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 20, 10, 50, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_50_30_20_10_5_25(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(25)
    self.assertEqual('[ 5, 10, 20, 25, 30, 50 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 10, 5, 30, 25, 50 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 10, 25, 50, 30, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_50_30_20_10_5_25_60(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(60)
    self.assertEqual('[ 5, 10, 20, 25, 30, 50, 60 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 10, 5, 30, 25, 50, 60 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 10, 25, 60, 50, 30, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_50_30_20_10_5_25_60_70(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(60)
    self.__bstree.insert_element(70)
    self.assertEqual('[ 5, 10, 20, 25, 30, 50, 60, 70 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 10, 5, 30, 25, 60, 50, 70 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 10, 25, 50, 70, 60, 30, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_50_30_20_10_5_25_60_70_80(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(60)
    self.__bstree.insert_element(70)
    self.__bstree.insert_element(80)
    self.assertEqual('[ 5, 10, 20, 25, 30, 50, 60, 70, 80 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 20, 10, 5, 60, 30, 25, 50, 70, 80 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 10, 25, 50, 30, 80, 70, 60, 20 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_50_30_20_10_5_25_60_70_80_22(self):
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(20)
    self.__bstree.insert_element(10)
    self.__bstree.insert_element(5)
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(60)
    self.__bstree.insert_element(70)
    self.__bstree.insert_element(80)
    self.__bstree.insert_element(22)
    self.assertEqual('[ 5, 10, 20, 22, 25, 30, 50, 60, 70, 80 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 30, 20, 10, 5, 25, 22, 60, 50, 70, 80 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 5, 10, 22, 25, 20, 50, 80, 70, 60, 30 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_25_30_31_50_45_55_34(self):
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(31)
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(45)
    self.__bstree.insert_element(55)
    self.__bstree.insert_element(34)
    self.assertEqual('[ 25, 30, 31, 34, 45, 50, 55 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 45, 30, 25, 31, 34, 50, 55 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 25, 34, 31, 30, 55, 50, 45 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(4, height)

  def test_insert_25_30_31_50_45_55_34_remove_50(self):
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(31)
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(45)
    self.__bstree.insert_element(55)
    self.__bstree.insert_element(34)
    self.__bstree.remove_element(50)
    self.assertEqual('[ 25, 30, 31, 34, 45, 55 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 31, 30, 25, 45, 34, 55 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 25, 30, 34, 55, 45, 31 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_25_30_31_50_45_55_34_remove_50_25(self):
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(31)
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(45)
    self.__bstree.insert_element(55)
    self.__bstree.insert_element(34)
    self.__bstree.remove_element(50)
    self.__bstree.remove_element(25)
    self.assertEqual('[ 30, 31, 34, 45, 55 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 31, 30, 45, 34, 55 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 30, 34, 55, 45, 31 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)

  def test_insert_25_30_31_50_45_55_34_remove_50_25_30(self):
    self.__bstree.insert_element(25)
    self.__bstree.insert_element(30)
    self.__bstree.insert_element(31)
    self.__bstree.insert_element(50)
    self.__bstree.insert_element(45)
    self.__bstree.insert_element(55)
    self.__bstree.insert_element(34)
    self.__bstree.remove_element(50)
    self.__bstree.remove_element(25)
    self.__bstree.remove_element(30)
    self.assertEqual('[ 31, 34, 45, 55 ]', str(self.__bstree))
    pre_order = self.__bstree.pre_order()
    self.assertEqual('[ 45, 31, 34, 55 ]', pre_order)
    post_order = self.__bstree.post_order()
    self.assertEqual('[ 34, 31, 55, 45 ]', post_order)
    height = self.__bstree.get_height()
    self.assertEqual(3, height)
  
if __name__ == "__main__":
    unittest.main()
