/**
 * 
 */
package falstad;

import generation.Order;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.io.File;

import javax.swing.JFrame;

import falstad.MazeController.UserInput;


/** 
 * This class is a wrapper class to startup the Maze game as a Java application
 * 
 *
 * This code is refactored code from Maze.java by Paul Falstad, www.falstad.com, Copyright (C) 1998, all rights reserved
 * Paul Falstad granted permission to modify and use code for teaching purposes.
 * Refactored by Peter Kemper
 * 
 * TODO: use logger for output instead of Sys.out
 */
public class MazeApplication extends JFrame {

	// not used, just to make the compiler, static code checker happy
	private static final long serialVersionUID = 1L;

	private KeyListener kl ;

	public static MazeController controller ;
	
	private Wizard wizardDriver;

	public ManualDriver driver = new ManualDriver();

	/**
	 * Constructor
	 */
	public MazeApplication() {
		super() ;
		System.out.println("MazeApplication: maze will be generated with a randomized algorithm.");
		
		wizardDriver = new Wizard();
		controller = new MazeController();
		controller.setDriver(wizardDriver);
		wizardDriver.trueSetMazeController(controller);
		controller.setApplication(this);
		init();

		setVisible(true);
	}
	
	public MazeApplication(String parameter) {
		super() ;
		File f = new File(parameter) ;
		if (f.exists() && f.canRead())
		{
			System.out.println("MazeApplication: loading maze from file: " + parameter);
			driver = new ManualDriver();
			driver.setMazeController();
			controller = driver.getMazeController();
			controller.setApplication(this);
			init();
			return ;
		}
		else {
			System.out.println("ash");
		}
	}

	/**
	 * Constructor that loads a maze from a given file or uses a particular method to generate a maze
	 */
	

	/**
	 * Initializes some internals and puts the game on display.
	 */
	private void init() {
		add(controller.getPanel()) ;
		
		kl = new SimpleKeyListener(this, controller, driver) ;
		addKeyListener(kl) ;
		
		setSize(400, 400) ;
		setVisible(true) ;
		
	
		setFocusable(true) ;
		
		controller.init();
		
	
		
	}
	
	/**
	 * Main method to launch Maze as a java application.
	 * The application can be operated in two ways. The intended normal operation is to provide no parameters
	 * and the maze will be generated by a particular algorithm. If a filename is given, the maze will be loaded
	 * from that file. The latter option is useful for development to check particular mazes.
	 * @param args is optional, first parameter is a filename with a given maze
	 */
	public static void main(String[] args) {
		MazeApplication a ; 
		switch (args.length) {
		case 1 : a = new MazeApplication(args[0]);
		break ;
		case 0 : 
		default : a = new MazeApplication() ;
		break ;
		}
		a.repaint() ;
	}

}
